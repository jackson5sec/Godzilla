/*      */ package org.fife.ui.rsyntaxtextarea.modes;
/*      */ 
/*      */ import java.io.IOException;
/*      */ import java.io.InputStream;
/*      */ import java.io.InputStreamReader;
/*      */ import java.io.Reader;
/*      */ import javax.swing.text.Segment;
/*      */ import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
/*      */ import org.fife.ui.rsyntaxtextarea.Token;
/*      */ import org.fife.ui.rsyntaxtextarea.TokenImpl;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class FortranTokenMaker
/*      */   extends AbstractJFlexTokenMaker
/*      */ {
/*      */   public static final int YYEOF = -1;
/*      */   public static final int STRING = 1;
/*      */   public static final int YYINITIAL = 0;
/*      */   public static final int CHAR = 2;
/*      */   private static final String ZZ_CMAP_PACKED = "\t\000\001\002\001\001\001\000\001\002\023\000\001\002\001\005\001\b\001\000\001\006\001\000\001\f\001\t\002\000\001\003\003\000\001\016\001\r\001%\001(\001)\007\006\002\000\001\n\001\013\001\n\002\000\001\025\001\037\001\007\001\004\001\022\001\031\001\021\001!\001\033\001&\001\"\001\017\001\036\001\024\001\026\001\035\001\023\001\027\001\032\001\020\001\030\001\006\001$\001 \001#\001'\004\000\001\006\001\000\001\025\001\037\001\034\001\004\001\022\001\031\001\021\001!\001\033\001&\001\"\001\017\001\036\001\024\001\026\001\035\001\023\001\027\001\032\001\020\001\030\001\006\001$\001 \001#\001'ﾅ\000";
/*   85 */   private static final char[] ZZ_CMAP = zzUnpackCMap("\t\000\001\002\001\001\001\000\001\002\023\000\001\002\001\005\001\b\001\000\001\006\001\000\001\f\001\t\002\000\001\003\003\000\001\016\001\r\001%\001(\001)\007\006\002\000\001\n\001\013\001\n\002\000\001\025\001\037\001\007\001\004\001\022\001\031\001\021\001!\001\033\001&\001\"\001\017\001\036\001\024\001\026\001\035\001\023\001\027\001\032\001\020\001\030\001\006\001$\001 \001#\001'\004\000\001\006\001\000\001\025\001\037\001\034\001\004\001\022\001\031\001\021\001!\001\033\001&\001\"\001\017\001\036\001\024\001\026\001\035\001\023\001\027\001\032\001\020\001\030\001\006\001$\001 \001#\001'ﾅ\000");
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*   90 */   private static final int[] ZZ_ACTION = zzUnpackAction();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static final String ZZ_ACTION_PACKED_0 = "\001\000\002\001\001\002\001\003\001\004\001\005\001\006\001\007\001\002\001\005\001\b\001\t\001\n\001\002\001\n\024\002\001\001\001\013\001\f\001\001\001\r\001\016\007\002\001\017\020\002\007\000!\002\001\017\027\002\001\017\b\002\001\017\003\002\004\000\002\017\003\002\002\017\020\002\001\017\b\002\002\017\003\002\001\017\002\002\001\017\006\002\001\017\002\000\003\002\001\017\004\002\001\017\026\002\001\000\020\002\001\020\n\002\001\017";
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static int[] zzUnpackAction() {
/*  103 */     int[] result = new int[257];
/*  104 */     int offset = 0;
/*  105 */     offset = zzUnpackAction("\001\000\002\001\001\002\001\003\001\004\001\005\001\006\001\007\001\002\001\005\001\b\001\t\001\n\001\002\001\n\024\002\001\001\001\013\001\f\001\001\001\r\001\016\007\002\001\017\020\002\007\000!\002\001\017\027\002\001\017\b\002\001\017\003\002\004\000\002\017\003\002\002\017\020\002\001\017\b\002\002\017\003\002\001\017\002\002\001\017\006\002\001\017\002\000\003\002\001\017\004\002\001\017\026\002\001\000\020\002\001\020\n\002\001\017", offset, result);
/*  106 */     return result;
/*      */   }
/*      */   
/*      */   private static int zzUnpackAction(String packed, int offset, int[] result) {
/*  110 */     int i = 0;
/*  111 */     int j = offset;
/*  112 */     int l = packed.length();
/*  113 */     label10: while (i < l) {
/*  114 */       int count = packed.charAt(i++);
/*  115 */       int value = packed.charAt(i++); while (true)
/*  116 */       { result[j++] = value; if (--count <= 0)
/*      */           continue label10;  } 
/*  118 */     }  return j;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  125 */   private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\000*\000T\000~\000~\000¨\000~\000Ò\000~\000ü\000Ħ\000~\000~\000Ő\000Ő\000~\000ź\000Ƥ\000ǎ\000Ǹ\000Ȣ\000Ɍ\000ɶ\000ʠ\000ˊ\000˴\000̞\000͈\000Ͳ\000Ħ\000Μ\000φ\000ϰ\000К\000ф\000Ѯ\000Ҙ\000~\000~\000ӂ\000~\000~\000Ӭ\000Ԗ\000Հ\000ժ\000֔\000־\000ר\000ؒ\000ؼ\000٦\000ڐ\000ں\000ۤ\000܎\000ܸ\000ݢ\000ތ\000޶\000ߠ\000ࠊ\000࠴\000࡞\000࢈\000ࢲ\000ࣜ\000आ\000र\000ग़\000঄\000ম\000৘\000ਂ\000ਬ\000੖\000઀\000પ\000૔\000૾\000ନ\000୒\000୼\000஦\000ௐ\000௺\000త\000౎\000౸\000ಢ\000ೌ\000೶\000ഠ\000ൊ\000൴\000ඞ\000෈\000ෲ\000ผ\000ๆ\000๰\000ບ\000ໄ\000໮\000༘\000ག\000ཬ\000ྖ\000࿀\000࿪\000န\000ှ\000ၨ\000႒\000Ⴜ\000ღ\000ᄐ\000ᄺ\000ᅤ\000ᆎ\000ᆸ\000ᇢ\000ሌ\000ሶ\000በ\000ኊ\000ኴ\000ዞ\000ገ\000ጲ\000፜\000ᎆ\000Ꮀ\000Ꮪ\000ᐄ\000ᐮ\000ᑘ\000ᒂ\000ᒬ\000ᓖ\000ᔀ\000ᔪ\000ᕔ\000ᕾ\000ᖨ\000ᗒ\000ᗼ\000ü\000ᘦ\000ᙐ\000ᙺ\000ᚤ\000ᛎ\000ᛸ\000ᜢ\000ᝌ\000᝶\000ហ\000៊\000៴\000᠞\000ᡈ\000ᡲ\000ᢜ\000ᣆ\000ᣰ\000ᤚ\000᥄\000᥮\000ᦘ\000ᧂ\000᧬\000ᨖ\000ᩀ\000ᩪ\000ᛸ\000᪔\000᪾\000᫨\000ᬒ\000ᬼ\000᭦\000ᮐ\000ᮺ\000ᯤ\000ᰎ\000᰸\000ᝌ\000ᱢ\000᲌\000Ჶ\000᳠\000ᴊ\000ᴴ\000ᵞ\000ᶈ\000ᶲ\000ᷜ\000Ḇ\000Ḱ\000Ṛ\000Ẅ\000Ắ\000Ộ\000ἂ\000Ἤ\000ᬒ\000ὖ\000ᾀ\000ᾪ\000῔\000῾\000 \000⁒\000⁼\000₦\000⃐\000⃺\000ℤ\000ⅎ\000ⅸ\000↢\000⇌\000⇶\000∠\000≊\000≴\000⊞\000⋈\000⋲\000⌜\000⍆\000⍰\000⎚\000⏄\000⏮\000␘\000⑂\000⑬\000⒖\000Ⓚ\000⓪\000└\000┾\000╨\000~\000▒\000▼\000◦\000☐\000☺\000♤\000⚎\000⚸\000⛢\000✌\000Ꮪ";
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static int[] zzUnpackRowMap() {
/*  163 */     int[] result = new int[257];
/*  164 */     int offset = 0;
/*  165 */     offset = zzUnpackRowMap("\000\000\000*\000T\000~\000~\000¨\000~\000Ò\000~\000ü\000Ħ\000~\000~\000Ő\000Ő\000~\000ź\000Ƥ\000ǎ\000Ǹ\000Ȣ\000Ɍ\000ɶ\000ʠ\000ˊ\000˴\000̞\000͈\000Ͳ\000Ħ\000Μ\000φ\000ϰ\000К\000ф\000Ѯ\000Ҙ\000~\000~\000ӂ\000~\000~\000Ӭ\000Ԗ\000Հ\000ժ\000֔\000־\000ר\000ؒ\000ؼ\000٦\000ڐ\000ں\000ۤ\000܎\000ܸ\000ݢ\000ތ\000޶\000ߠ\000ࠊ\000࠴\000࡞\000࢈\000ࢲ\000ࣜ\000आ\000र\000ग़\000঄\000ম\000৘\000ਂ\000ਬ\000੖\000઀\000પ\000૔\000૾\000ନ\000୒\000୼\000஦\000ௐ\000௺\000త\000౎\000౸\000ಢ\000ೌ\000೶\000ഠ\000ൊ\000൴\000ඞ\000෈\000ෲ\000ผ\000ๆ\000๰\000ບ\000ໄ\000໮\000༘\000ག\000ཬ\000ྖ\000࿀\000࿪\000န\000ှ\000ၨ\000႒\000Ⴜ\000ღ\000ᄐ\000ᄺ\000ᅤ\000ᆎ\000ᆸ\000ᇢ\000ሌ\000ሶ\000በ\000ኊ\000ኴ\000ዞ\000ገ\000ጲ\000፜\000ᎆ\000Ꮀ\000Ꮪ\000ᐄ\000ᐮ\000ᑘ\000ᒂ\000ᒬ\000ᓖ\000ᔀ\000ᔪ\000ᕔ\000ᕾ\000ᖨ\000ᗒ\000ᗼ\000ü\000ᘦ\000ᙐ\000ᙺ\000ᚤ\000ᛎ\000ᛸ\000ᜢ\000ᝌ\000᝶\000ហ\000៊\000៴\000᠞\000ᡈ\000ᡲ\000ᢜ\000ᣆ\000ᣰ\000ᤚ\000᥄\000᥮\000ᦘ\000ᧂ\000᧬\000ᨖ\000ᩀ\000ᩪ\000ᛸ\000᪔\000᪾\000᫨\000ᬒ\000ᬼ\000᭦\000ᮐ\000ᮺ\000ᯤ\000ᰎ\000᰸\000ᝌ\000ᱢ\000᲌\000Ჶ\000᳠\000ᴊ\000ᴴ\000ᵞ\000ᶈ\000ᶲ\000ᷜ\000Ḇ\000Ḱ\000Ṛ\000Ẅ\000Ắ\000Ộ\000ἂ\000Ἤ\000ᬒ\000ὖ\000ᾀ\000ᾪ\000῔\000῾\000 \000⁒\000⁼\000₦\000⃐\000⃺\000ℤ\000ⅎ\000ⅸ\000↢\000⇌\000⇶\000∠\000≊\000≴\000⊞\000⋈\000⋲\000⌜\000⍆\000⍰\000⎚\000⏄\000⏮\000␘\000⑂\000⑬\000⒖\000Ⓚ\000⓪\000└\000┾\000╨\000~\000▒\000▼\000◦\000☐\000☺\000♤\000⚎\000⚸\000⛢\000✌\000Ꮪ", offset, result);
/*  166 */     return result;
/*      */   }
/*      */   
/*      */   private static int zzUnpackRowMap(String packed, int offset, int[] result) {
/*  170 */     int i = 0;
/*  171 */     int j = offset;
/*  172 */     int l = packed.length();
/*  173 */     while (i < l) {
/*  174 */       int high = packed.charAt(i++) << 16;
/*  175 */       result[j++] = high | packed.charAt(i++);
/*      */     } 
/*  177 */     return j;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  183 */   private static final int[] ZZ_TRANS = zzUnpackTrans();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static final String ZZ_TRANS_PACKED_0 = "\001\004\001\005\001\006\001\007\001\b\001\t\001\n\001\013\001\f\001\r\001\016\001\017\001\020\001\017\001\021\001\022\001\023\001\024\001\025\001\n\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\002\n\001\"\001\n\001#\002\n\001$\002\n\001%\001&\006%\001'!%\001(\001)\007(\001* (,\000\001\006+\000\001+\001\000\001\n\001,\007\000\001-\001.\001\n\001/\001\n\0010\0011\0012\0013\001\n\0014\0015\0016\001,\0017\0018\0019\n\n\004\000\001\n\001\000\002\n\007\000\033\n\004\000\001\n\001\000\001\n\001:\007\000\001;\002\n\001<\002\n\001=\001>\003\n\001?\001\n\001:\001\n\001@\002\n\001A\001\n\001B\006\n\013\000\001\020-\000\001C\001D\001C\001E\001\000\001F\001G\001H\002\000\001I\024\000\001\n\001\000\002\n\007\000\001J\001\n\001J\001K\003\n\001L\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001M\001\n\001N\t\n\001O\b\n\004\000\001\n\001\000\002\n\007\000\007\n\001P\023\n\004\000\001\n\001\000\002\n\007\000\001Q\004\n\001R\013\n\001S\t\n\004\000\001\n\001\000\002\n\007\000\007\n\001T\004\n\001U\016\n\004\000\001\n\001\000\001\n\001:\007\000\001V\001W\003\n\0010\005\n\001X\001Y\001:\001\n\001Z\001[\n\n\004\000\001\n\001\000\002\n\007\000\016\n\001O\f\n\004\000\001\n\001\000\002\n\007\000\003\n\001\\\027\n\004\000\001\n\001\000\002\n\007\000\013\n\001]\017\n\004\000\001\n\001\000\002\n\007\000\001^\006\n\001_\001\n\001`\021\n\004\000\001\n\001\000\002\n\007\000\001\n\001a\001\n\001b\001c\001d\003\n\001e\002\n\001f\016\n\004\000\001g\001\000\001\n\001h\007\000\005\n\001i\001j\003\n\001k\001l\001\n\001h\001\n\001m\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001n\001\n\001o\022\n\004\000\001\n\001\000\002\n\007\000\006\n\001p\001q\004\n\001r\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001s\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001t\016\n\004\000\001\n\001\000\002\n\007\000\b\n\001u\t\n\001v\b\n\004\000\001\n\001\000\002\n\007\000\003\n\001w\027\n\001%\001\000\006%\001\000!%\001(\001\000\007(\001\000 (\004\000\001\n\001\000\002\n\007\000\f\n\001x\016\n\004\000\001\n\001\000\002\n\007\000\007\n\001y\007\n\001@\013\n\004\000\001\n\001\000\002\n\007\000\007\n\001z\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001M\024\n\004\000\001\n\001\000\002\n\007\000\006\n\001{\003\n\001|\006\n\001}\t\n\004\000\001\n\001\000\002\n\007\000\f\n\001U\016\n\004\000\001\n\001\000\001\n\001:\007\000\001\n\001~\t\n\001X\001\n\001:\002\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\t\n\001\021\n\004\000\001\n\001\000\002\n\007\000\003\n\001\027\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\004\n\001c\007\n\001f\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001\004\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001]\032\n\004\000\001\n\001\000\002\n\007\000\007\n\001[\023\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\f\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001\n\n\001]\004\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\005\n\001\005\n\001\003\n\001\013\n\004\000\001\n\001\000\002\n\007\000\004\n\001c\007\n\001K\016\n\004\000\001\n\001\000\002\n\007\000\016\n\001\f\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\001\n\0019\007\000\r\n\0019\r\n\020\000\001\001\000\001.\000\001%\000\001(\000\001+\000\001,\000\001'\000\001\030\000\001\n\001\000\002\n\007\000\001\n\001\001\n\001\027\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001K\027\n\004\000\001\n\001\000\002\n\007\000\001\n\001\031\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\f\n\001\001\n\001\f\n\004\000\001\n\001\000\002\n\007\000\005\n\001]\025\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\001\006\n\001z\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001K\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001\004\n\001\016\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\n\001\000\002\n\007\000\001\n\001 \004\n\001¡\016\n\001\"\005\n\004\000\001\n\001\000\002\n\007\000\003\n\001\027\n\004\000\001\n\001\000\002\n\007\000\007\n\001¢\023\n\004\000\001\n\001\000\002\n\007\000\b\n\001£\022\n\004\000\001\n\001\000\002\n\007\000\005\n\001¤\025\n\004\000\001\n\001\000\002\n\007\000\007\n\001}\023\n\004\000\001\n\001\000\002\n\007\000\001¥\032\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\020\n\001¦\n\n\004\000\001\n\001\000\002\n\007\000\002\n\001K\002\n\001\025\n\004\000\001\n\001\000\002\n\007\000\005\n\0010\006\n\001§\016\n\004\000\001\n\001\000\002\n\007\000\022\n\001¨\b\n\004\000\001©\001\000\001\n\001ª\007\000\001\n\001«\002\n\001¬\b\n\001ª\r\n\004\000\001\n\001\000\002\n\007\000\020\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\f\n\001­\016\n\004\000\001\n\001\000\002\n\007\000\f\n\001®\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001¯\007\n\001°\f\n\004\000\001\n\001\000\002\n\007\000\b\n\001±\001\032\021\n\004\000\001\n\001\000\002\n\007\000\003\n\001²\003\n\001³\004\n\001U\016\n\004\000\001\n\001\000\002\n\007\000\021\n\001´\t\n\004\000\001µ\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\005\n\001´\025\n\004\000\001\n\001\000\001\n\001¶\007\000\r\n\001¶\r\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\f\n\001·\016\n\004\000\001\n\001\000\002\n\007\000\003\n\001¸\b\n\0019\016\n\004\000\001\n\001\000\002\n\007\000\021\n\001\t\n\004\000\001\n\001\000\002\n\007\000\017\n\001\013\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\n\001\000\002\n\007\000\002\n\001¹\030\n\004\000\001\n\001\000\002\n\007\000\001º\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001»\024\n\004\000\001\n\001\000\002\n\007\000\016\n\001\f\n\004\000\001\n\001\000\002\n\007\000\006\n\001¼\024\n\004\000\001\n\001\000\002\n\007\000\020\n\0019\n\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\007\n\001½\023\n\004\000\001\n\001\000\002\n\007\000\001\n\001\031\n\004\000\001\n\001\000\002\n\007\000\003\n\001¾\027\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\021\n\001¿\t\n\004\000\001\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\005\n\001¿\025\n\004\000\001\n\001\000\002\n\007\000\002\n\001\b\n\001]\017\n\004\000\001\n\001\000\002\n\007\000\001À\032\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\001\n\001Á\025\n\001¯\003\n\004\000\001\n\001\000\002\n\007\000\022\n\001\b\n\004\000\001\n\001\000\002\n\007\000\016\n\001Â\f\n\004\000\001\n\001\000\002\n\007\000\001­\032\n\004\000\001\n\001\000\002\n\007\000\b\n\001Ã\022\n\016\000\001\0203\000\001Ä\025\000\0014\000\001Å\036\000\001\n\001\000\002\n\007\000\f\n\001Æ\f\n\001Ç\001\n\004\000\001\n\001\000\002\n\007\000\005\n\001È\025\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\003\n\001É\027\n\004\000\001\001\000\002\n\007\000\n\n\001Ê\001\n\001Ë\016\n\004\000\001\n\001\000\002\n\007\000\001Ì\032\n\004\000\001\n\001\000\002\n\007\000\007\n\001Í\023\n\004\000\001\n\001\000\002\n\007\000\005\n\001Î\025\n\004\000\001\n\001\000\002\n\007\000\006\n\001¯\024\n\004\000\001\n\001\000\002\n\007\000\021\n\001Ï\t\n\004\000\001\n\001\000\002\n\007\000\005\n\001Ï\025\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ð\021\n\004\000\001\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001Ñ\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ò\b\n\001½\013\n\004\000\001\n\001\000\001\n\001Ó\007\000\r\n\001Ó\r\n\004\000\001\n\001\000\002\n\007\000\003\n\001Ô\027\n\004\000\001\n\001\000\002\n\007\000\b\n\001Õ\022\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ñ\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001­\027\n\004\000\001\n\001\000\002\n\007\000\001Ö\032\n\004\000\001\n\001\000\002\n\007\000\003\n\001×\027\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ø\021\n\004\000\001\n\001\000\002\n\007\000\021\n\001\t\n\004\000\001\n\001\000\002\n\007\000\002\n\001K\030\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ù\024\n\004\000\001\n\001\000\001\n\001Ú\007\000\r\n\001Ú\r\n\004\000\001\n\001\000\002\n\007\000\002\n\001Û\030\n\004\000\001\n\001\000\002\n\007\000\026\n\001\002\n\001\001\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ü\021\n\004\000\001\n\001\000\002\n\007\000\023\n\001Ý\007\n\004\000\001\n\001\000\002\n\007\000\001\n\001]\031\n\004\000\001\n\001\000\002\n\007\000\b\n\001]\022\n\004\000\001\n\001\000\002\n\007\000\031\n\001Ç\001\n\004\000\001\n\001\000\002\n\007\000\001Þ\032\n\004\000\001\n\001\000\002\n\007\000\t\n\001ß\021\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\005\n\001à\025\n\004\000\001\n\001\000\002\n\007\000\031\n\001\001\n\004\000\001\n\001\000\002\n\007\000\f\n\001á\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001â\005\n\001ã\016\n\004\000\001\n\001\000\002\n\007\000\001©\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001ä\024\n\022\000\001å1\000\001Ä\023\000\001\n\001\000\001\n\001\007\000\r\n\001\r\n\004\000\001\n\001\000\002\n\007\000\026\n\001\004\n\004\000\001\n\001\000\002\n\007\000\013\n\001æ\017\n\004\000\001\n\001\000\002\n\007\000\f\n\001Ë\b\n\001ç\005\n\004\000\001\n\001\000\002\n\007\000\f\n\0019\016\n\004\000\001\n\001\000\002\n\007\000\n\n\001\020\n\004\000\001\n\001\000\002\n\007\000\f\n\001è\016\n\004\000\001\n\001\000\001\n\001é\007\000\r\n\001é\r\n\004\000\001\n\001\000\002\n\007\000\032\n\001\004\000\001\n\001\000\002\n\007\000\b\n\001K\022\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\001\n\001ê\031\n\004\000\001\n\001\000\001\n\001\007\000\r\n\001\r\n\004\000\001\n\001\000\002\n\007\000\007\n\001ë\023\n\004\000\001\n\001\000\002\n\007\000\t\n\001ì\021\n\004\000\001\n\001\000\002\n\007\000\002\n\001í\030\n\004\000\001\n\001\000\002\n\007\000\f\n\001¸\016\n\004\000\001\n\001\000\002\n\007\000\017\n\001î\013\n\004\000\001\n\001\000\002\n\007\000\f\n\001à\016\n\004\000\001\n\001\000\002\n\007\000\b\n\001ï\022\n\004\000\001\n\001\000\002\n\007\000\001ð\032\n\004\000\001\n\001\000\002\n\007\000\013\n\001ñ\017\n\004\000\001\n\001\000\002\n\007\000\007\n\001ò\023\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\013\n\001ê\017\n\004\000\001\n\001\000\002\n\007\000\005\n\001¯\025\n\004\000\001\n\001\000\002\n\007\000\f\n\001ó\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001ô\025\n\004\000\001\n\001\000\001\n\001õ\007\000\r\n\001õ\r\n\016\000\001ö\037\000\001\n\001\000\002\n\007\000\n\n\001í\020\n\004\000\001\n\001\000\002\n\007\000\022\n\001÷\b\n\004\000\001\n\001\000\001\n\001ø\007\000\r\n\001ø\r\n\004\000\001\n\001\000\002\n\007\000\006\n\001ù\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001ú\016\n\004\000\001\n\001\000\002\n\007\000\t\n\001û\021\n\004\000\001]\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\003\n\001Ñ\027\n\004\000\001\n\001\000\002\n\007\000\003\n\001õ\027\n\004\000\001\n\001\000\002\n\007\000\006\n\001x\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001\003\n\001\023\n\004\000\001\n\001\000\002\n\007\000\016\n\001ü\f\n\004\000\001\n\001\000\001\n\001ý\007\000\r\n\001ý\r\n\004\000\001\n\001\000\002\n\007\000\005\n\001[\025\n\004\000\001\n\001\000\002\n\007\000\t\n\001]\021\n\004\000\001\n\001\000\002\n\007\000\001\n\001í\031\n\004\000\001\n\001\000\002\n\007\000\003\n\001¸\027\n\004\000\001\n\001\000\002\n\007\000\f\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001\n\001þ\031\n\004\000\001\n\001\000\002\n\007\000\007\n\001K\023\n\004\000\001\n\001\000\002\n\007\000\001\n\001ÿ\031\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ā\024\n\004\000\001\n\001\000\002\n\007\000\006\n\001·\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001ā\002\n\001\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001T\016\n\004\000\001\n\001\000\001\n\001]\007\000\r\n\001]\r\n";
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static final int ZZ_UNKNOWN_ERROR = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static final int ZZ_NO_MATCH = 1;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static final int ZZ_PUSHBACK_2BIG = 2;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static int[] zzUnpackTrans() {
/*  436 */     int[] result = new int[10038];
/*  437 */     int offset = 0;
/*  438 */     offset = zzUnpackTrans("\001\004\001\005\001\006\001\007\001\b\001\t\001\n\001\013\001\f\001\r\001\016\001\017\001\020\001\017\001\021\001\022\001\023\001\024\001\025\001\n\001\026\001\027\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001 \001!\002\n\001\"\001\n\001#\002\n\001$\002\n\001%\001&\006%\001'!%\001(\001)\007(\001* (,\000\001\006+\000\001+\001\000\001\n\001,\007\000\001-\001.\001\n\001/\001\n\0010\0011\0012\0013\001\n\0014\0015\0016\001,\0017\0018\0019\n\n\004\000\001\n\001\000\002\n\007\000\033\n\004\000\001\n\001\000\001\n\001:\007\000\001;\002\n\001<\002\n\001=\001>\003\n\001?\001\n\001:\001\n\001@\002\n\001A\001\n\001B\006\n\013\000\001\020-\000\001C\001D\001C\001E\001\000\001F\001G\001H\002\000\001I\024\000\001\n\001\000\002\n\007\000\001J\001\n\001J\001K\003\n\001L\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001M\001\n\001N\t\n\001O\b\n\004\000\001\n\001\000\002\n\007\000\007\n\001P\023\n\004\000\001\n\001\000\002\n\007\000\001Q\004\n\001R\013\n\001S\t\n\004\000\001\n\001\000\002\n\007\000\007\n\001T\004\n\001U\016\n\004\000\001\n\001\000\001\n\001:\007\000\001V\001W\003\n\0010\005\n\001X\001Y\001:\001\n\001Z\001[\n\n\004\000\001\n\001\000\002\n\007\000\016\n\001O\f\n\004\000\001\n\001\000\002\n\007\000\003\n\001\\\027\n\004\000\001\n\001\000\002\n\007\000\013\n\001]\017\n\004\000\001\n\001\000\002\n\007\000\001^\006\n\001_\001\n\001`\021\n\004\000\001\n\001\000\002\n\007\000\001\n\001a\001\n\001b\001c\001d\003\n\001e\002\n\001f\016\n\004\000\001g\001\000\001\n\001h\007\000\005\n\001i\001j\003\n\001k\001l\001\n\001h\001\n\001m\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001n\001\n\001o\022\n\004\000\001\n\001\000\002\n\007\000\006\n\001p\001q\004\n\001r\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001s\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001t\016\n\004\000\001\n\001\000\002\n\007\000\b\n\001u\t\n\001v\b\n\004\000\001\n\001\000\002\n\007\000\003\n\001w\027\n\001%\001\000\006%\001\000!%\001(\001\000\007(\001\000 (\004\000\001\n\001\000\002\n\007\000\f\n\001x\016\n\004\000\001\n\001\000\002\n\007\000\007\n\001y\007\n\001@\013\n\004\000\001\n\001\000\002\n\007\000\007\n\001z\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001M\024\n\004\000\001\n\001\000\002\n\007\000\006\n\001{\003\n\001|\006\n\001}\t\n\004\000\001\n\001\000\002\n\007\000\f\n\001U\016\n\004\000\001\n\001\000\001\n\001:\007\000\001\n\001~\t\n\001X\001\n\001:\002\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\t\n\001\021\n\004\000\001\n\001\000\002\n\007\000\003\n\001\027\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\004\n\001c\007\n\001f\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001\004\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001]\032\n\004\000\001\n\001\000\002\n\007\000\007\n\001[\023\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\f\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001\n\n\001]\004\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\005\n\001\005\n\001\003\n\001\013\n\004\000\001\n\001\000\002\n\007\000\004\n\001c\007\n\001K\016\n\004\000\001\n\001\000\002\n\007\000\016\n\001\f\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\001\n\0019\007\000\r\n\0019\r\n\020\000\001\001\000\001.\000\001%\000\001(\000\001+\000\001,\000\001'\000\001\030\000\001\n\001\000\002\n\007\000\001\n\001\001\n\001\027\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001K\027\n\004\000\001\n\001\000\002\n\007\000\001\n\001\031\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\f\n\001\001\n\001\f\n\004\000\001\n\001\000\002\n\007\000\005\n\001]\025\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\001\006\n\001z\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001K\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001\004\n\001\016\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\n\001\000\002\n\007\000\001\n\001 \004\n\001¡\016\n\001\"\005\n\004\000\001\n\001\000\002\n\007\000\003\n\001\027\n\004\000\001\n\001\000\002\n\007\000\007\n\001¢\023\n\004\000\001\n\001\000\002\n\007\000\b\n\001£\022\n\004\000\001\n\001\000\002\n\007\000\005\n\001¤\025\n\004\000\001\n\001\000\002\n\007\000\007\n\001}\023\n\004\000\001\n\001\000\002\n\007\000\001¥\032\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\020\n\001¦\n\n\004\000\001\n\001\000\002\n\007\000\002\n\001K\002\n\001\025\n\004\000\001\n\001\000\002\n\007\000\005\n\0010\006\n\001§\016\n\004\000\001\n\001\000\002\n\007\000\022\n\001¨\b\n\004\000\001©\001\000\001\n\001ª\007\000\001\n\001«\002\n\001¬\b\n\001ª\r\n\004\000\001\n\001\000\002\n\007\000\020\n\001[\n\n\004\000\001\n\001\000\002\n\007\000\f\n\001­\016\n\004\000\001\n\001\000\002\n\007\000\f\n\001®\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001¯\007\n\001°\f\n\004\000\001\n\001\000\002\n\007\000\b\n\001±\001\032\021\n\004\000\001\n\001\000\002\n\007\000\003\n\001²\003\n\001³\004\n\001U\016\n\004\000\001\n\001\000\002\n\007\000\021\n\001´\t\n\004\000\001µ\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\005\n\001´\025\n\004\000\001\n\001\000\001\n\001¶\007\000\r\n\001¶\r\n\004\000\001\n\001\000\002\n\007\000\005\n\001\025\n\004\000\001\n\001\000\002\n\007\000\f\n\001·\016\n\004\000\001\n\001\000\002\n\007\000\003\n\001¸\b\n\0019\016\n\004\000\001\n\001\000\002\n\007\000\021\n\001\t\n\004\000\001\n\001\000\002\n\007\000\017\n\001\013\n\004\000\001\n\001\000\002\n\007\000\013\n\001\017\n\004\000\001\n\001\000\002\n\007\000\002\n\001¹\030\n\004\000\001\n\001\000\002\n\007\000\001º\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001»\024\n\004\000\001\n\001\000\002\n\007\000\016\n\001\f\n\004\000\001\n\001\000\002\n\007\000\006\n\001¼\024\n\004\000\001\n\001\000\002\n\007\000\020\n\0019\n\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\007\n\001½\023\n\004\000\001\n\001\000\002\n\007\000\001\n\001\031\n\004\000\001\n\001\000\002\n\007\000\003\n\001¾\027\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\021\n\001¿\t\n\004\000\001\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\005\n\001¿\025\n\004\000\001\n\001\000\002\n\007\000\002\n\001\b\n\001]\017\n\004\000\001\n\001\000\002\n\007\000\001À\032\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\001\n\001Á\025\n\001¯\003\n\004\000\001\n\001\000\002\n\007\000\022\n\001\b\n\004\000\001\n\001\000\002\n\007\000\016\n\001Â\f\n\004\000\001\n\001\000\002\n\007\000\001­\032\n\004\000\001\n\001\000\002\n\007\000\b\n\001Ã\022\n\016\000\001\0203\000\001Ä\025\000\0014\000\001Å\036\000\001\n\001\000\002\n\007\000\f\n\001Æ\f\n\001Ç\001\n\004\000\001\n\001\000\002\n\007\000\005\n\001È\025\n\004\000\001\n\001\000\002\n\007\000\007\n\001\023\n\004\000\001\n\001\000\002\n\007\000\003\n\001É\027\n\004\000\001\001\000\002\n\007\000\n\n\001Ê\001\n\001Ë\016\n\004\000\001\n\001\000\002\n\007\000\001Ì\032\n\004\000\001\n\001\000\002\n\007\000\007\n\001Í\023\n\004\000\001\n\001\000\002\n\007\000\005\n\001Î\025\n\004\000\001\n\001\000\002\n\007\000\006\n\001¯\024\n\004\000\001\n\001\000\002\n\007\000\021\n\001Ï\t\n\004\000\001\n\001\000\002\n\007\000\005\n\001Ï\025\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ð\021\n\004\000\001\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001\001Ñ\023\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ò\b\n\001½\013\n\004\000\001\n\001\000\001\n\001Ó\007\000\r\n\001Ó\r\n\004\000\001\n\001\000\002\n\007\000\003\n\001Ô\027\n\004\000\001\n\001\000\002\n\007\000\b\n\001Õ\022\n\004\000\001\n\001\000\002\n\007\000\005\n\001\t\n\001\013\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ñ\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001­\027\n\004\000\001\n\001\000\002\n\007\000\001Ö\032\n\004\000\001\n\001\000\002\n\007\000\003\n\001×\027\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ø\021\n\004\000\001\n\001\000\002\n\007\000\021\n\001\t\n\004\000\001\n\001\000\002\n\007\000\002\n\001K\030\n\004\000\001\n\001\000\002\n\007\000\002\n\001\030\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ù\024\n\004\000\001\n\001\000\001\n\001Ú\007\000\r\n\001Ú\r\n\004\000\001\n\001\000\002\n\007\000\002\n\001Û\030\n\004\000\001\n\001\000\002\n\007\000\026\n\001\002\n\001\001\n\004\000\001\n\001\000\002\n\007\000\t\n\001Ü\021\n\004\000\001\n\001\000\002\n\007\000\023\n\001Ý\007\n\004\000\001\n\001\000\002\n\007\000\001\n\001]\031\n\004\000\001\n\001\000\002\n\007\000\b\n\001]\022\n\004\000\001\n\001\000\002\n\007\000\031\n\001Ç\001\n\004\000\001\n\001\000\002\n\007\000\001Þ\032\n\004\000\001\n\001\000\002\n\007\000\t\n\001ß\021\n\004\000\001\n\001\000\002\n\007\000\006\n\001\024\n\004\000\001\n\001\000\002\n\007\000\005\n\001à\025\n\004\000\001\n\001\000\002\n\007\000\031\n\001\001\n\004\000\001\n\001\000\002\n\007\000\f\n\001á\016\n\004\000\001\n\001\000\002\n\007\000\006\n\001â\005\n\001ã\016\n\004\000\001\n\001\000\002\n\007\000\001©\032\n\004\000\001\n\001\000\002\n\007\000\006\n\001ä\024\n\022\000\001å1\000\001Ä\023\000\001\n\001\000\001\n\001\007\000\r\n\001\r\n\004\000\001\n\001\000\002\n\007\000\026\n\001\004\n\004\000\001\n\001\000\002\n\007\000\013\n\001æ\017\n\004\000\001\n\001\000\002\n\007\000\f\n\001Ë\b\n\001ç\005\n\004\000\001\n\001\000\002\n\007\000\f\n\0019\016\n\004\000\001\n\001\000\002\n\007\000\n\n\001\020\n\004\000\001\n\001\000\002\n\007\000\f\n\001è\016\n\004\000\001\n\001\000\001\n\001é\007\000\r\n\001é\r\n\004\000\001\n\001\000\002\n\007\000\032\n\001\004\000\001\n\001\000\002\n\007\000\b\n\001K\022\n\004\000\001\n\001\000\002\n\007\000\b\n\001\022\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\001\n\001ê\031\n\004\000\001\n\001\000\001\n\001\007\000\r\n\001\r\n\004\000\001\n\001\000\002\n\007\000\007\n\001ë\023\n\004\000\001\n\001\000\002\n\007\000\t\n\001ì\021\n\004\000\001\n\001\000\002\n\007\000\002\n\001í\030\n\004\000\001\n\001\000\002\n\007\000\f\n\001¸\016\n\004\000\001\n\001\000\002\n\007\000\017\n\001î\013\n\004\000\001\n\001\000\002\n\007\000\f\n\001à\016\n\004\000\001\n\001\000\002\n\007\000\b\n\001ï\022\n\004\000\001\n\001\000\002\n\007\000\001ð\032\n\004\000\001\n\001\000\002\n\007\000\013\n\001ñ\017\n\004\000\001\n\001\000\002\n\007\000\007\n\001ò\023\n\004\000\001\n\001\000\002\n\007\000\001\032\n\004\000\001\n\001\000\002\n\007\000\013\n\001ê\017\n\004\000\001\n\001\000\002\n\007\000\005\n\001¯\025\n\004\000\001\n\001\000\002\n\007\000\f\n\001ó\016\n\004\000\001\n\001\000\002\n\007\000\005\n\001ô\025\n\004\000\001\n\001\000\001\n\001õ\007\000\r\n\001õ\r\n\016\000\001ö\037\000\001\n\001\000\002\n\007\000\n\n\001í\020\n\004\000\001\n\001\000\002\n\007\000\022\n\001÷\b\n\004\000\001\n\001\000\001\n\001ø\007\000\r\n\001ø\r\n\004\000\001\n\001\000\002\n\007\000\006\n\001ù\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001ú\016\n\004\000\001\n\001\000\002\n\007\000\t\n\001û\021\n\004\000\001]\001\000\002\n\007\000\033\n\004\000\001\n\001\000\002\n\007\000\003\n\001Ñ\027\n\004\000\001\n\001\000\002\n\007\000\003\n\001õ\027\n\004\000\001\n\001\000\002\n\007\000\006\n\001x\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001\003\n\001\023\n\004\000\001\n\001\000\002\n\007\000\016\n\001ü\f\n\004\000\001\n\001\000\001\n\001ý\007\000\r\n\001ý\r\n\004\000\001\n\001\000\002\n\007\000\005\n\001[\025\n\004\000\001\n\001\000\002\n\007\000\t\n\001]\021\n\004\000\001\n\001\000\002\n\007\000\001\n\001í\031\n\004\000\001\n\001\000\002\n\007\000\003\n\001¸\027\n\004\000\001\n\001\000\002\n\007\000\f\n\001\016\n\004\000\001\n\001\000\002\n\007\000\001\n\001þ\031\n\004\000\001\n\001\000\002\n\007\000\007\n\001K\023\n\004\000\001\n\001\000\002\n\007\000\001\n\001ÿ\031\n\004\000\001\n\001\000\002\n\007\000\006\n\001Ā\024\n\004\000\001\n\001\000\002\n\007\000\006\n\001·\024\n\004\000\001\n\001\000\002\n\007\000\003\n\001ā\002\n\001\024\n\004\000\001\n\001\000\002\n\007\000\f\n\001T\016\n\004\000\001\n\001\000\001\n\001]\007\000\r\n\001]\r\n", offset, result);
/*  439 */     return result;
/*      */   }
/*      */   
/*      */   private static int zzUnpackTrans(String packed, int offset, int[] result) {
/*  443 */     int i = 0;
/*  444 */     int j = offset;
/*  445 */     int l = packed.length();
/*  446 */     label10: while (i < l) {
/*  447 */       int count = packed.charAt(i++);
/*  448 */       int value = packed.charAt(i++);
/*  449 */       value--; while (true)
/*  450 */       { result[j++] = value; if (--count <= 0)
/*      */           continue label10;  } 
/*  452 */     }  return j;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  462 */   private static final String[] ZZ_ERROR_MSG = new String[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  471 */   private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
/*      */   
/*      */   private static final String ZZ_ATTRIBUTE_PACKED_0 = "\001\000\002\001\002\t\001\001\001\t\001\001\001\t\002\001\002\t\002\001\001\t\025\001\002\t\001\001\002\t\030\001\007\000F\001\004\0000\001\002\000\037\001\001\000\020\001\001\t\013\001";
/*      */   
/*      */   private Reader zzReader;
/*      */   
/*      */   private int zzState;
/*      */   
/*      */   private static int[] zzUnpackAttribute() {
/*  480 */     int[] result = new int[257];
/*  481 */     int offset = 0;
/*  482 */     offset = zzUnpackAttribute("\001\000\002\001\002\t\001\001\001\t\001\001\001\t\002\001\002\t\002\001\001\t\025\001\002\t\001\001\002\t\030\001\007\000F\001\004\0000\001\002\000\037\001\001\000\020\001\001\t\013\001", offset, result);
/*  483 */     return result;
/*      */   }
/*      */   
/*      */   private static int zzUnpackAttribute(String packed, int offset, int[] result) {
/*  487 */     int i = 0;
/*  488 */     int j = offset;
/*  489 */     int l = packed.length();
/*  490 */     label10: while (i < l) {
/*  491 */       int count = packed.charAt(i++);
/*  492 */       int value = packed.charAt(i++); while (true)
/*  493 */       { result[j++] = value; if (--count <= 0)
/*      */           continue label10;  } 
/*  495 */     }  return j;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  505 */   private int zzLexicalState = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private char[] zzBuffer;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private int zzMarkedPos;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private int zzCurrentPos;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private int zzStartRead;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private int zzEndRead;
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean zzAtEOF;
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public FortranTokenMaker() {}
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addToken(int tokenType) {
/*  545 */     addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void addToken(int start, int end, int tokenType) {
/*  555 */     int so = start + this.offsetShift;
/*  556 */     addToken(this.zzBuffer, start, end, tokenType, so);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
/*  572 */     super.addToken(array, start, end, tokenType, startOffset);
/*  573 */     this.zzStartRead = this.zzMarkedPos;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public String[] getLineCommentStartAndEnd(int languageIndex) {
/*  582 */     return new String[] { "!", null };
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
/*  601 */     resetTokenList();
/*  602 */     this.offsetShift = -text.offset + startOffset;
/*      */ 
/*      */     
/*  605 */     int state = 0;
/*  606 */     switch (initialTokenType) {
/*      */       case 13:
/*  608 */         state = 1;
/*  609 */         this.start = text.offset;
/*      */         break;
/*      */       case 14:
/*  612 */         state = 2;
/*  613 */         this.start = text.offset;
/*      */         break;
/*      */       default:
/*  616 */         state = 0;
/*      */         break;
/*      */     } 
/*  619 */     this.s = text;
/*      */     try {
/*  621 */       yyreset(this.zzReader);
/*  622 */       yybegin(state);
/*  623 */       return yylex();
/*  624 */     } catch (IOException ioe) {
/*  625 */       ioe.printStackTrace();
/*  626 */       return (Token)new TokenImpl();
/*      */     } 
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private boolean zzRefill() {
/*  639 */     return (this.zzCurrentPos >= this.s.offset + this.s.count);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final void yyreset(Reader reader) {
/*  655 */     this.zzBuffer = this.s.array;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  663 */     this.zzStartRead = this.s.offset;
/*  664 */     this.zzEndRead = this.zzStartRead + this.s.count - 1;
/*  665 */     this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
/*  666 */     this.zzLexicalState = 0;
/*  667 */     this.zzReader = reader;
/*  668 */     this.zzAtEOF = false;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public FortranTokenMaker(Reader in) {
/*  681 */     this.zzReader = in;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public FortranTokenMaker(InputStream in) {
/*  691 */     this(new InputStreamReader(in));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private static char[] zzUnpackCMap(String packed) {
/*  701 */     char[] map = new char[65536];
/*  702 */     int i = 0;
/*  703 */     int j = 0;
/*  704 */     label10: while (i < 168) {
/*  705 */       int count = packed.charAt(i++);
/*  706 */       char value = packed.charAt(i++); while (true)
/*  707 */       { map[j++] = value; if (--count <= 0)
/*      */           continue label10;  } 
/*  709 */     }  return map;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final void yyclose() throws IOException {
/*  717 */     this.zzAtEOF = true;
/*  718 */     this.zzEndRead = this.zzStartRead;
/*      */     
/*  720 */     if (this.zzReader != null) {
/*  721 */       this.zzReader.close();
/*      */     }
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final int yystate() {
/*  729 */     return this.zzLexicalState;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final void yybegin(int newState) {
/*  740 */     this.zzLexicalState = newState;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final String yytext() {
/*  748 */     return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final char yycharat(int pos) {
/*  764 */     return this.zzBuffer[this.zzStartRead + pos];
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final int yylength() {
/*  772 */     return this.zzMarkedPos - this.zzStartRead;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   private void zzScanError(int errorCode) {
/*      */     String message;
/*      */     try {
/*  793 */       message = ZZ_ERROR_MSG[errorCode];
/*      */     }
/*  795 */     catch (ArrayIndexOutOfBoundsException e) {
/*  796 */       message = ZZ_ERROR_MSG[0];
/*      */     } 
/*      */     
/*  799 */     throw new Error(message);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void yypushback(int number) {
/*  812 */     if (number > yylength()) {
/*  813 */       zzScanError(2);
/*      */     }
/*  815 */     this.zzMarkedPos -= number;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public Token yylex() throws IOException {
/*  833 */     int zzEndReadL = this.zzEndRead;
/*  834 */     char[] zzBufferL = this.zzBuffer;
/*  835 */     char[] zzCMapL = ZZ_CMAP;
/*      */     
/*  837 */     int[] zzTransL = ZZ_TRANS;
/*  838 */     int[] zzRowMapL = ZZ_ROWMAP;
/*  839 */     int[] zzAttrL = ZZ_ATTRIBUTE;
/*      */     
/*      */     while (true) {
/*  842 */       int zzInput, zzMarkedPosL = this.zzMarkedPos;
/*      */       
/*  844 */       int zzAction = -1;
/*      */       
/*  846 */       int zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
/*      */       
/*  848 */       this.zzState = this.zzLexicalState;
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       while (true) {
/*  854 */         if (zzCurrentPosL < zzEndReadL)
/*  855 */         { zzInput = zzBufferL[zzCurrentPosL++]; }
/*  856 */         else { if (this.zzAtEOF) {
/*  857 */             int i = -1;
/*      */             
/*      */             break;
/*      */           } 
/*      */           
/*  862 */           this.zzCurrentPos = zzCurrentPosL;
/*  863 */           this.zzMarkedPos = zzMarkedPosL;
/*  864 */           boolean eof = zzRefill();
/*      */           
/*  866 */           zzCurrentPosL = this.zzCurrentPos;
/*  867 */           zzMarkedPosL = this.zzMarkedPos;
/*  868 */           zzBufferL = this.zzBuffer;
/*  869 */           zzEndReadL = this.zzEndRead;
/*  870 */           if (eof) {
/*  871 */             int i = -1;
/*      */             
/*      */             break;
/*      */           } 
/*  875 */           zzInput = zzBufferL[zzCurrentPosL++]; }
/*      */ 
/*      */         
/*  878 */         int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
/*  879 */         if (zzNext == -1)
/*  880 */           break;  this.zzState = zzNext;
/*      */         
/*  882 */         int zzAttributes = zzAttrL[this.zzState];
/*  883 */         if ((zzAttributes & 0x1) == 1) {
/*  884 */           zzAction = this.zzState;
/*  885 */           zzMarkedPosL = zzCurrentPosL;
/*  886 */           if ((zzAttributes & 0x8) == 8) {
/*      */             break;
/*      */           }
/*      */         } 
/*      */       } 
/*      */ 
/*      */       
/*  893 */       this.zzMarkedPos = zzMarkedPosL;
/*      */       
/*  895 */       switch ((zzAction < 0) ? zzAction : ZZ_ACTION[zzAction]) {
/*      */         case 15:
/*  897 */           addToken(6); continue;
/*      */         case 17:
/*      */           continue;
/*      */         case 2:
/*  901 */           addToken(20); continue;
/*      */         case 18:
/*      */           continue;
/*      */         case 4:
/*  905 */           addToken(21); continue;
/*      */         case 19:
/*      */           continue;
/*      */         case 11:
/*  909 */           addToken(this.start, this.zzStartRead - 1, 13); return (Token)this.firstToken;
/*      */         case 20:
/*      */           continue;
/*      */         case 13:
/*  913 */           addToken(this.start, this.zzStartRead - 1, 14); return (Token)this.firstToken;
/*      */         case 21:
/*      */           continue;
/*      */         case 10:
/*  917 */           addToken(23);
/*      */           continue;
/*      */ 
/*      */         
/*      */         case 22:
/*      */           continue;
/*      */         
/*      */         case 5:
/*  925 */           if (this.zzStartRead == this.s.offset) {
/*  926 */             addToken(this.zzStartRead, this.zzEndRead, 1);
/*  927 */             addNullToken();
/*  928 */             return (Token)this.firstToken;
/*      */           } 
/*      */           
/*  931 */           addToken(20);
/*      */           continue;
/*      */         case 23:
/*      */           continue;
/*      */         case 16:
/*  936 */           addToken(9); continue;
/*      */         case 24:
/*      */           continue;
/*      */         case 8:
/*  940 */           this.start = this.zzMarkedPos - 1; yybegin(1); continue;
/*      */         case 25:
/*      */           continue;
/*      */         case 7:
/*  944 */           addToken(this.zzStartRead, this.zzEndRead, 1); addNullToken(); return (Token)this.firstToken;
/*      */ 
/*      */         
/*      */         case 26:
/*      */           continue;
/*      */ 
/*      */         
/*      */         case 6:
/*  952 */           if (this.zzStartRead == this.s.offset) {
/*  953 */             addToken(this.zzStartRead, this.zzEndRead, 3);
/*  954 */             addNullToken();
/*  955 */             return (Token)this.firstToken;
/*      */           } 
/*      */           
/*  958 */           addToken(20);
/*      */           continue;
/*      */         case 27:
/*      */           continue;
/*      */         case 9:
/*  963 */           this.start = this.zzMarkedPos - 1; yybegin(2); continue;
/*      */         case 28:
/*      */           continue;
/*      */         case 14:
/*  967 */           yybegin(0); addToken(this.start, this.zzStartRead, 14); continue;
/*      */         case 29:
/*      */           continue;
/*      */         case 12:
/*  971 */           yybegin(0); addToken(this.start, this.zzStartRead, 13); continue;
/*      */         case 30:
/*      */           continue;
/*      */         case 3:
/*  975 */           addNullToken(); return (Token)this.firstToken;
/*      */         
/*      */         case 31:
/*      */         case 1:
/*      */         case 32:
/*      */           continue;
/*      */       } 
/*      */       
/*  983 */       if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos) {
/*  984 */         this.zzAtEOF = true;
/*  985 */         switch (this.zzLexicalState) {
/*      */           case 1:
/*  987 */             addToken(this.start, this.zzStartRead - 1, 13); return (Token)this.firstToken;
/*      */           case 258:
/*      */             continue;
/*      */           case 0:
/*  991 */             addNullToken(); return (Token)this.firstToken;
/*      */           case 259:
/*      */             continue;
/*      */           case 2:
/*  995 */             addToken(this.start, this.zzStartRead - 1, 14); return (Token)this.firstToken;
/*      */           case 260:
/*      */             continue;
/*      */         } 
/*  999 */         return null;
/*      */       } 
/*      */ 
/*      */       
/* 1003 */       zzScanError(1);
/*      */     } 
/*      */   }
/*      */ }


/* Location:              C:\User\\user\Downloads\godzilla.jar!\org\fif\\ui\rsyntaxtextarea\modes\FortranTokenMaker.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */