/*     */ package org.fife.ui.rsyntaxtextarea.modes;
/*     */ 
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.InputStreamReader;
/*     */ import java.io.Reader;
/*     */ import javax.swing.text.Segment;
/*     */ import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
/*     */ import org.fife.ui.rsyntaxtextarea.Token;
/*     */ import org.fife.ui.rsyntaxtextarea.TokenImpl;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ScalaTokenMaker
/*     */   extends AbstractJFlexCTokenMaker
/*     */ {
/*     */   public static final int YYEOF = -1;
/*     */   public static final int EOL_COMMENT = 3;
/*     */   public static final int MULTILINE_STRING_DOUBLE = 1;
/*     */   public static final int YYINITIAL = 0;
/*     */   public static final int MLC = 2;
/*     */   private static final String ZZ_CMAP_PACKED = "\t\000\001\031\001\024\001\000\001\031\023\000\001\031\001\033\001\025\001\033\001\001\001\033\001\033\001\022\002\004\001\030\001\016\001\033\001\016\001\021\001\027\001\n\t\003\001\"\001\033\001\000\001\033\001\000\002\033\003\b\001\017\001\f\001\017\005\001\001\006\006\001\001*\007\001\001\004\001\023\001\004\001\000\001\005\001\026\001$\001%\001\t\001\020\001\r\001 \0011\001\034\001!\001.\0010\001\007\001+\001(\001'\001\036\001\002\001&\001\037\001\035\001-\001/\001#\001\013\001)\001,\001\032\001\000\001\032\001\033ﾁ\000";
/*  89 */   private static final char[] ZZ_CMAP = zzUnpackCMap("\t\000\001\031\001\024\001\000\001\031\023\000\001\031\001\033\001\025\001\033\001\001\001\033\001\033\001\022\002\004\001\030\001\016\001\033\001\016\001\021\001\027\001\n\t\003\001\"\001\033\001\000\001\033\001\000\002\033\003\b\001\017\001\f\001\017\005\001\001\006\006\001\001*\007\001\001\004\001\023\001\004\001\000\001\005\001\026\001$\001%\001\t\001\020\001\r\001 \0011\001\034\001!\001.\0010\001\007\001+\001(\001'\001\036\001\002\001&\001\037\001\035\001-\001/\001#\001\013\001)\001,\001\032\001\000\001\032\001\033ﾁ\000");
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*  94 */   private static final int[] ZZ_ACTION = zzUnpackAction();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String ZZ_ACTION_PACKED_0 = "\001\000\001\001\002\000\002\002\001\003\001\004\002\002\001\003\003\002\001\005\001\006\001\007\002\002\001\b\r\002\001\001\001\t\001\n\002\001\001\013\005\001\001\f\003\001\001\002\001\003\001\000\002\r\003\002\001\000\003\002\001\016\001\017\001\005\002\007\001\020\001\007\001\021\001\022\026\002\001\t\001\000\001\023\b\000\001\002\001\r\001\000\004\002\001\024\001\002\001\020\001\025\001\026\t\002\001\016\n\002\001\027\b\000\021\002\002\000\001\030\002\000\001\031\004\002\001\016\006\002\004\000\003\002";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static int[] zzUnpackAction() {
/* 108 */     int[] result = new int[184];
/* 109 */     int offset = 0;
/* 110 */     offset = zzUnpackAction("\001\000\001\001\002\000\002\002\001\003\001\004\002\002\001\003\003\002\001\005\001\006\001\007\002\002\001\b\r\002\001\001\001\t\001\n\002\001\001\013\005\001\001\f\003\001\001\002\001\003\001\000\002\r\003\002\001\000\003\002\001\016\001\017\001\005\002\007\001\020\001\007\001\021\001\022\026\002\001\t\001\000\001\023\b\000\001\002\001\r\001\000\004\002\001\024\001\002\001\020\001\025\001\026\t\002\001\016\n\002\001\027\b\000\021\002\002\000\001\030\002\000\001\031\004\002\001\016\006\002\004\000\003\002", offset, result);
/* 111 */     return result;
/*     */   }
/*     */   
/*     */   private static int zzUnpackAction(String packed, int offset, int[] result) {
/* 115 */     int i = 0;
/* 116 */     int j = offset;
/* 117 */     int l = packed.length();
/* 118 */     label10: while (i < l) {
/* 119 */       int count = packed.charAt(i++);
/* 120 */       int value = packed.charAt(i++); while (true)
/* 121 */       { result[j++] = value; if (--count <= 0)
/*     */           continue label10;  } 
/* 123 */     }  return j;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 130 */   private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String ZZ_ROWMAP_PACKED_0 = "\000\000\0002\000d\000\000È\000ú\000Ĭ\000È\000Ş\000Ɛ\000ǂ\000Ǵ\000Ȧ\000ɘ\000ʊ\000È\000ʼ\000ˮ\000̠\000͒\000΄\000ζ\000Ϩ\000К\000ь\000Ѿ\000Ұ\000Ӣ\000Ԕ\000Ն\000ո\000֪\000ל\000؎\000ـ\000È\000ٲ\000ڤ\000È\000ۖ\000܈\000ܺ\000ݬ\000ޞ\000È\000ߐ\000ࠂ\000࠴\000ࡦ\000È\000࢘\000È\000࣊\000ࣼ\000म\000ॠ\000঒\000ৄ\000৶\000ਨ\000ú\000È\000ਗ਼\000ઌ\000ા\000૰\000ଢ\000È\000È\000୔\000ஆ\000ஸ\000௪\000జ\000౎\000ಀ\000ಲ\000೤\000ഖ\000ൈ\000ൺ\000ඬ\000ෞ\000ฐ\000โ\000๴\000຦\000໘\000༊\000༼\000཮\000È\000ྠ\000È\000࿒\000င\000ံ\000ၨ\000ႚ\000჌\000ჾ\000ᄰ\000ᅢ\000ᆔ\000ᇆ\000ᇸ\000ሪ\000ቜ\000኎\000঒\000ዀ\000È\000È\000È\000ዲ\000ጤ\000ፖ\000ᎈ\000Ꮊ\000Ꮼ\000ᐞ\000ᑐ\000ᒂ\000ᒴ\000ᓦ\000ᔘ\000ᕊ\000ᕼ\000ᖮ\000ᗠ\000ᘒ\000ᙄ\000ᙶ\000ᚨ\000È\000ᛚ\000ᜌ\000᜾\000ᝰ\000អ\000។\000᠆\000ᠸ\000ᡪ\000ᢜ\000ᣎ\000ᤀ\000ᤲ\000ᥤ\000ᦖ\000ᧈ\000᧺\000ᨬ\000ᩞ\000᪐\000᫂\000᫴\000ᬦ\000᭘\000ᮊ\000ᮼ\000ᯮ\000ᰠ\000᱒\000ᲄ\000Ჶ\000᳨\000ᴚ\000ᵌ\000ᵾ\000ᶰ\000ᷢ\000Ḕ\000Ṇ\000Ṹ\000Ẫ\000Ờ\000Ἆ\000ᰠ\000ὀ\000Ჶ\000ὲ\000ᾤ\000ῖ";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static int[] zzUnpackRowMap() {
/* 158 */     int[] result = new int[184];
/* 159 */     int offset = 0;
/* 160 */     offset = zzUnpackRowMap("\000\000\0002\000d\000\000È\000ú\000Ĭ\000È\000Ş\000Ɛ\000ǂ\000Ǵ\000Ȧ\000ɘ\000ʊ\000È\000ʼ\000ˮ\000̠\000͒\000΄\000ζ\000Ϩ\000К\000ь\000Ѿ\000Ұ\000Ӣ\000Ԕ\000Ն\000ո\000֪\000ל\000؎\000ـ\000È\000ٲ\000ڤ\000È\000ۖ\000܈\000ܺ\000ݬ\000ޞ\000È\000ߐ\000ࠂ\000࠴\000ࡦ\000È\000࢘\000È\000࣊\000ࣼ\000म\000ॠ\000঒\000ৄ\000৶\000ਨ\000ú\000È\000ਗ਼\000ઌ\000ા\000૰\000ଢ\000È\000È\000୔\000ஆ\000ஸ\000௪\000జ\000౎\000ಀ\000ಲ\000೤\000ഖ\000ൈ\000ൺ\000ඬ\000ෞ\000ฐ\000โ\000๴\000຦\000໘\000༊\000༼\000཮\000È\000ྠ\000È\000࿒\000င\000ံ\000ၨ\000ႚ\000჌\000ჾ\000ᄰ\000ᅢ\000ᆔ\000ᇆ\000ᇸ\000ሪ\000ቜ\000኎\000঒\000ዀ\000È\000È\000È\000ዲ\000ጤ\000ፖ\000ᎈ\000Ꮊ\000Ꮼ\000ᐞ\000ᑐ\000ᒂ\000ᒴ\000ᓦ\000ᔘ\000ᕊ\000ᕼ\000ᖮ\000ᗠ\000ᘒ\000ᙄ\000ᙶ\000ᚨ\000È\000ᛚ\000ᜌ\000᜾\000ᝰ\000អ\000។\000᠆\000ᠸ\000ᡪ\000ᢜ\000ᣎ\000ᤀ\000ᤲ\000ᥤ\000ᦖ\000ᧈ\000᧺\000ᨬ\000ᩞ\000᪐\000᫂\000᫴\000ᬦ\000᭘\000ᮊ\000ᮼ\000ᯮ\000ᰠ\000᱒\000ᲄ\000Ჶ\000᳨\000ᴚ\000ᵌ\000ᵾ\000ᶰ\000ᷢ\000Ḕ\000Ṇ\000Ṹ\000Ẫ\000Ờ\000Ἆ\000ᰠ\000ὀ\000Ჶ\000ὲ\000ᾤ\000ῖ", offset, result);
/* 161 */     return result;
/*     */   }
/*     */   
/*     */   private static int zzUnpackRowMap(String packed, int offset, int[] result) {
/* 165 */     int i = 0;
/* 166 */     int j = offset;
/* 167 */     int l = packed.length();
/* 168 */     while (i < l) {
/* 169 */       int high = packed.charAt(i++) << 16;
/* 170 */       result[j++] = high | packed.charAt(i++);
/*     */     } 
/* 172 */     return j;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 178 */   private static final int[] ZZ_TRANS = zzUnpackTrans();
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final String ZZ_TRANS_PACKED_0 = "\001\005\002\006\001\007\001\b\002\006\001\t\001\006\001\n\001\013\002\006\001\f\001\005\001\006\001\r\001\016\001\017\001\005\001\020\001\021\001\022\001\023\001\005\001\024\001\b\001\005\001\006\001\025\001\026\001\027\001\030\001\031\001\005\001\032\001\033\001\006\001\034\001\035\001\036\001\037\001\006\001 \003\006\001!\002\006\023\"\001#\001$\001%\034\"\024&\001'\003&\001(\003&\001)\003&\001*\002&\001+\016&\024,\001-\007,\001.\003,\001/\002,\0010\016,3\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\017\006\003\000\001\007\002\000\0022\002\000\001\007\001\000\0023\001\000\0024\0015\016\000\0014\022\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\0016\r\006\001\000\003\006\001\000\0011\001\006\0017\006\006\001\000\002\006\013\000\006\006\001\000\001\006\0018\r\006\003\000\001\007\002\000\0022\002\000\001\007\0019\0023\001\000\0024\0015\016\000\0014\022\000\003\006\001\000\0011\001\006\001:\003\006\001;\002\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001<\001\000\002\006\013\000\006\006\001\000\004\006\001=\n\006\003\000\0015\006\000\0015'\000\022\017\001>\001?\036\017\023@\001A\001@\001B\034@\026C\001\000\033C\027\000\001D\001E2\000\001\024\031\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001F\005\006\001\000\003\006\001G\002\006\001H\b\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001I\001\006\001J\013\006\001\000\003\006\001\000\0011\007\006\001K\001\000\002\006\013\000\006\006\001\000\n\006\001L\004\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001M\001\000\001\006\001N\002\006\001O\n\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\004\006\001=\001\006\001\000\b\006\001P\006\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001Q\004\006\001R\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\002\006\001S\f\006\001\000\003\006\001\000\0011\007\006\001T\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\002\006\001U\t\006\001V\002\006\001\000\003\006\001\000\0011\007\006\001W\001\000\002\006\013\000\006\006\001\000\n\006\001X\004\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001Y\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001Z\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001[\r\006\023\"\003\000\034\"\024\\\001\000\035\\\025\000\001]\034\000\024&\001\000\003&\001\000\003&\001\000\003&\001\000\002&\001\000\016&\027\000\001^7\000\001_1\000\001`\003\000\001a3\000\001b\016\000\024,\001\000\007,\001\000\003,\001\000\002,\001\000\016,\035\000\001c1\000\001d\003\000\001e3\000\001f\016\000\001g\003\006\001\000\0011\b\006\001g\002\006\001\000\007g\001\000\002g\006\006\001g\017\006\003\000\001h\006\000\001h\003\000\001i&\000\0015\006\000\0015\001\000\0023\001\000\0024\017\000\0014\022\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\t\006\001j\005\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001k\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001l\001\006\001m\002\006\001\000\017\006\003\000\001n\004\000\003n\001\000\002n\001\000\002n\017\000\001n\003\000\002n\r\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\003\006\001m\002\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001o\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\004\006\001=\001\006\001\000\017\006\024\017\001\000\035\017\023@\001A\001@\001p0@\001\000\035@\025\000\001q\034\000\026C\001r\033C\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001s\001\000\003\006\001t\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001u\004\006\001=\003\006\001m\004\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\002\006\001m\003\006\001\000\017\006\001\000\003\006\001\000\0011\003\006\001v\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001w\001\000\004\006\001x\n\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001y\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\002\006\001z\003\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\005\006\001{\t\006\001\000\003\006\001\000\0011\001\006\001:\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001|\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\002\006\001}\003\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001~\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\003\006\001\002\006\001\000\017\006\001\000\001\006\001\001\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\013\006\001\003\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001=\016\006\001\000\003\006\001\000\0011\001\006\001\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001l\004\006\001\000\017\006\001\000\003\006\001\000\0011\001\006\001=\006\006\001\000\002\006\013\000\006\006\001\000\003\006\001=\013\006\025\000\0019\000\0012\000\001\032\000\001M\000\001+\000\0012\000\001\032\000\001M\000\001\016\000\001g\r\000\001g\003\000\007g\001\000\002g\006\000\001g\022\000\001h\006\000\001h\004\000\0024\017\000\0014\024\000\001h\006\000\001h(\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\006\006\001=\b\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\003\006\001s\002\006\001\000\017\006\001\000\003\006\001\000\0011\003\006\001\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001=\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\003\006\001=\002\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\004\006\001W\n\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\r\006\001\001\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\f\006\001\002\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\001\006\001\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\007\006\001\007\006\001\000\003\006\001\000\0011\001\006\001\006\006\001\000\002\006\013\000\006\006\001\000\004\006\001\n\006\001\000\003\006\001\000\0011\001\006\001m\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001=\005\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\n\006\001\004\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\n\006\001\004\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001\013\006\001\000\003\006\001\000\0011\001\006\001=\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\001\006\001 \006\006\001\000\002\006\013\000\006\006\001\000\017\006\036\000\001¡5\000\001¢\034\000\0015\000\001£>\000\001¤5\000\001¥\034\000\0015\000\001¦!\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\005\006\001§\t\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001=\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001¨\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001©\r\006\001\000\003\006\001\000\0011\007\006\001ª\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001 \001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001=\013\006\001\000\003\006\001\000\0011\001\006\001«\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\004\006\001¬\n\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001­\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001®\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001¯\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001°\013\006\001\000\003\006\001\000\0011\003\006\001\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001±\013\006\001\000\003\006\001\000\0011\b\006\001\000\001\006\001=\013\000\006\006\001\000\017\006\037\000\001\002\000\001¢&\000\001²\033\000\003£\001³\t£\001³\002£\002³\004\000\001£\001³\002\000\001³\006£\001³\017£\037\000\001\002\000\001¥&\000\001´\033\000\003¦\001µ\t¦\001µ\002¦\002µ\004\000\001¦\001µ\002\000\001µ\006¦\001µ\017¦\001\000\003\006\001\000\0011\b\006\001\000\001\006\001s\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\016\006\001m\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001m\004\006\001\000\017\006\001\000\003\006\001\000\0011\003\006\001¶\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\001\006\001j\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\b\006\001m\006\006\001\000\003\006\001\000\0011\003\006\001u\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001·\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\005\006\001=\t\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001¸\001\000\017\006\027\000\001£1\000\001¦\033\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001s\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\001\006\001m\013\000\006\006\001\000\017\006";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final int ZZ_UNKNOWN_ERROR = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final int ZZ_NO_MATCH = 1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final int ZZ_PUSHBACK_2BIG = 2;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static int[] zzUnpackTrans() {
/* 391 */     int[] result = new int[8200];
/* 392 */     int offset = 0;
/* 393 */     offset = zzUnpackTrans("\001\005\002\006\001\007\001\b\002\006\001\t\001\006\001\n\001\013\002\006\001\f\001\005\001\006\001\r\001\016\001\017\001\005\001\020\001\021\001\022\001\023\001\005\001\024\001\b\001\005\001\006\001\025\001\026\001\027\001\030\001\031\001\005\001\032\001\033\001\006\001\034\001\035\001\036\001\037\001\006\001 \003\006\001!\002\006\023\"\001#\001$\001%\034\"\024&\001'\003&\001(\003&\001)\003&\001*\002&\001+\016&\024,\001-\007,\001.\003,\001/\002,\0010\016,3\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\017\006\003\000\001\007\002\000\0022\002\000\001\007\001\000\0023\001\000\0024\0015\016\000\0014\022\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\0016\r\006\001\000\003\006\001\000\0011\001\006\0017\006\006\001\000\002\006\013\000\006\006\001\000\001\006\0018\r\006\003\000\001\007\002\000\0022\002\000\001\007\0019\0023\001\000\0024\0015\016\000\0014\022\000\003\006\001\000\0011\001\006\001:\003\006\001;\002\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001<\001\000\002\006\013\000\006\006\001\000\004\006\001=\n\006\003\000\0015\006\000\0015'\000\022\017\001>\001?\036\017\023@\001A\001@\001B\034@\026C\001\000\033C\027\000\001D\001E2\000\001\024\031\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001F\005\006\001\000\003\006\001G\002\006\001H\b\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001I\001\006\001J\013\006\001\000\003\006\001\000\0011\007\006\001K\001\000\002\006\013\000\006\006\001\000\n\006\001L\004\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001M\001\000\001\006\001N\002\006\001O\n\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\004\006\001=\001\006\001\000\b\006\001P\006\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001Q\004\006\001R\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\002\006\001S\f\006\001\000\003\006\001\000\0011\007\006\001T\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\002\006\001U\t\006\001V\002\006\001\000\003\006\001\000\0011\007\006\001W\001\000\002\006\013\000\006\006\001\000\n\006\001X\004\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001Y\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001Z\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001[\r\006\023\"\003\000\034\"\024\\\001\000\035\\\025\000\001]\034\000\024&\001\000\003&\001\000\003&\001\000\003&\001\000\002&\001\000\016&\027\000\001^7\000\001_1\000\001`\003\000\001a3\000\001b\016\000\024,\001\000\007,\001\000\003,\001\000\002,\001\000\016,\035\000\001c1\000\001d\003\000\001e3\000\001f\016\000\001g\003\006\001\000\0011\b\006\001g\002\006\001\000\007g\001\000\002g\006\006\001g\017\006\003\000\001h\006\000\001h\003\000\001i&\000\0015\006\000\0015\001\000\0023\001\000\0024\017\000\0014\022\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\t\006\001j\005\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001k\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001l\001\006\001m\002\006\001\000\017\006\003\000\001n\004\000\003n\001\000\002n\001\000\002n\017\000\001n\003\000\002n\r\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\003\006\001m\002\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001o\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\004\006\001=\001\006\001\000\017\006\024\017\001\000\035\017\023@\001A\001@\001p0@\001\000\035@\025\000\001q\034\000\026C\001r\033C\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001s\001\000\003\006\001t\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001u\004\006\001=\003\006\001m\004\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\002\006\001m\003\006\001\000\017\006\001\000\003\006\001\000\0011\003\006\001v\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001w\001\000\004\006\001x\n\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001y\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\002\006\001z\003\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\005\006\001{\t\006\001\000\003\006\001\000\0011\001\006\001:\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001|\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\002\006\001}\003\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001~\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\003\006\001\002\006\001\000\017\006\001\000\001\006\001\001\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\013\006\001\003\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001=\016\006\001\000\003\006\001\000\0011\001\006\001\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001l\004\006\001\000\017\006\001\000\003\006\001\000\0011\001\006\001=\006\006\001\000\002\006\013\000\006\006\001\000\003\006\001=\013\006\025\000\0019\000\0012\000\001\032\000\001M\000\001+\000\0012\000\001\032\000\001M\000\001\016\000\001g\r\000\001g\003\000\007g\001\000\002g\006\000\001g\022\000\001h\006\000\001h\004\000\0024\017\000\0014\024\000\001h\006\000\001h(\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\006\006\001=\b\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\003\006\001s\002\006\001\000\017\006\001\000\003\006\001\000\0011\003\006\001\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001=\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\003\006\001=\002\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\004\006\001W\n\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\r\006\001\001\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\f\006\001\002\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\001\006\001\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\007\006\001\007\006\001\000\003\006\001\000\0011\001\006\001\006\006\001\000\002\006\013\000\006\006\001\000\004\006\001\n\006\001\000\003\006\001\000\0011\001\006\001m\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001=\005\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\n\006\001\004\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\n\006\001\004\006\001\000\003\006\001\000\0011\007\006\001\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001\013\006\001\000\003\006\001\000\0011\001\006\001=\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\001\006\001 \006\006\001\000\002\006\013\000\006\006\001\000\017\006\036\000\001¡5\000\001¢\034\000\0015\000\001£>\000\001¤5\000\001¥\034\000\0015\000\001¦!\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\005\006\001§\t\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001=\004\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001¨\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001©\r\006\001\000\003\006\001\000\0011\007\006\001ª\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001 \001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001=\013\006\001\000\003\006\001\000\0011\001\006\001«\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\004\006\001¬\n\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001­\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001®\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001¯\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001°\013\006\001\000\003\006\001\000\0011\003\006\001\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001±\013\006\001\000\003\006\001\000\0011\b\006\001\000\001\006\001=\013\000\006\006\001\000\017\006\037\000\001\002\000\001¢&\000\001²\033\000\003£\001³\t£\001³\002£\002³\004\000\001£\001³\002\000\001³\006£\001³\017£\037\000\001\002\000\001¥&\000\001´\033\000\003¦\001µ\t¦\001µ\002¦\002µ\004\000\001¦\001µ\002\000\001µ\006¦\001µ\017¦\001\000\003\006\001\000\0011\b\006\001\000\001\006\001s\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\016\006\001m\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001m\004\006\001\000\017\006\001\000\003\006\001\000\0011\003\006\001¶\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\001\006\001j\006\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\b\006\001m\006\006\001\000\003\006\001\000\0011\003\006\001u\004\006\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\001\006\001\r\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\003\006\001·\013\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\006\006\001\000\005\006\001=\t\006\001\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\005\006\001¸\001\000\017\006\027\000\001£1\000\001¦\033\000\003\006\001\000\0011\b\006\001\000\002\006\013\000\001\006\001\004\006\001\000\017\006\001\000\003\006\001\000\0011\007\006\001s\001\000\002\006\013\000\006\006\001\000\017\006\001\000\003\006\001\000\0011\b\006\001\000\001\006\001m\013\000\006\006\001\000\017\006", offset, result);
/* 394 */     return result;
/*     */   }
/*     */   
/*     */   private static int zzUnpackTrans(String packed, int offset, int[] result) {
/* 398 */     int i = 0;
/* 399 */     int j = offset;
/* 400 */     int l = packed.length();
/* 401 */     label10: while (i < l) {
/* 402 */       int count = packed.charAt(i++);
/* 403 */       int value = packed.charAt(i++);
/* 404 */       value--; while (true)
/* 405 */       { result[j++] = value; if (--count <= 0)
/*     */           continue label10;  } 
/* 407 */     }  return j;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 417 */   private static final String[] ZZ_ERROR_MSG = new String[] { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 426 */   private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
/*     */ 
/*     */   
/*     */   private static final String ZZ_ATTRIBUTE_PACKED_0 = "\001\000\001\001\002\000\001\t\002\001\001\t\007\001\001\t\023\001\001\t\002\001\001\t\005\001\001\t\004\001\001\t\001\000\001\t\004\001\001\000\004\001\001\t\005\001\002\t\026\001\001\t\001\000\001\t\b\000\002\001\001\000\006\001\003\t\024\001\001\t\b\000\021\001\002\000\001\001\002\000\f\001\004\000\003\001";
/*     */   
/*     */   private Reader zzReader;
/*     */   
/*     */   private int zzState;
/*     */ 
/*     */   
/*     */   private static int[] zzUnpackAttribute() {
/* 437 */     int[] result = new int[184];
/* 438 */     int offset = 0;
/* 439 */     offset = zzUnpackAttribute("\001\000\001\001\002\000\001\t\002\001\001\t\007\001\001\t\023\001\001\t\002\001\001\t\005\001\001\t\004\001\001\t\001\000\001\t\004\001\001\000\004\001\001\t\005\001\002\t\026\001\001\t\001\000\001\t\b\000\002\001\001\000\006\001\003\t\024\001\001\t\b\000\021\001\002\000\001\001\002\000\f\001\004\000\003\001", offset, result);
/* 440 */     return result;
/*     */   }
/*     */   
/*     */   private static int zzUnpackAttribute(String packed, int offset, int[] result) {
/* 444 */     int i = 0;
/* 445 */     int j = offset;
/* 446 */     int l = packed.length();
/* 447 */     label10: while (i < l) {
/* 448 */       int count = packed.charAt(i++);
/* 449 */       int value = packed.charAt(i++); while (true)
/* 450 */       { result[j++] = value; if (--count <= 0)
/*     */           continue label10;  } 
/* 452 */     }  return j;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/* 462 */   private int zzLexicalState = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private char[] zzBuffer;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int zzMarkedPos;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int zzCurrentPos;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int zzStartRead;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private int zzEndRead;
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean zzAtEOF;
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ScalaTokenMaker() {}
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addHyperlinkToken(int start, int end, int tokenType) {
/* 502 */     int so = start + this.offsetShift;
/* 503 */     addToken(this.zzBuffer, start, end, tokenType, so, true);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addToken(int tokenType) {
/* 513 */     addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void addToken(int start, int end, int tokenType) {
/* 524 */     int so = start + this.offsetShift;
/* 525 */     addToken(this.zzBuffer, start, end, tokenType, so, false);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void addToken(char[] array, int start, int end, int tokenType, int startOffset, boolean hyperlink) {
/* 543 */     super.addToken(array, start, end, tokenType, startOffset, hyperlink);
/* 544 */     this.zzStartRead = this.zzMarkedPos;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String[] getLineCommentStartAndEnd(int languageIndex) {
/* 553 */     return new String[] { "//", null };
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
/* 572 */     resetTokenList();
/* 573 */     this.offsetShift = -text.offset + startOffset;
/*     */ 
/*     */     
/* 576 */     int state = 0;
/* 577 */     switch (initialTokenType) {
/*     */       case 13:
/* 579 */         state = 1;
/*     */         break;
/*     */       case 2:
/* 582 */         state = 2;
/*     */         break;
/*     */       default:
/* 585 */         state = 0;
/*     */         break;
/*     */     } 
/* 588 */     this.s = text;
/* 589 */     this.start = text.offset;
/*     */     try {
/* 591 */       yyreset(this.zzReader);
/* 592 */       yybegin(state);
/* 593 */       return yylex();
/* 594 */     } catch (IOException ioe) {
/* 595 */       ioe.printStackTrace();
/* 596 */       return (Token)new TokenImpl();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private boolean zzRefill() {
/* 609 */     return (this.zzCurrentPos >= this.s.offset + this.s.count);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void yyreset(Reader reader) {
/* 625 */     this.zzBuffer = this.s.array;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 633 */     this.zzStartRead = this.s.offset;
/* 634 */     this.zzEndRead = this.zzStartRead + this.s.count - 1;
/* 635 */     this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
/* 636 */     this.zzLexicalState = 0;
/* 637 */     this.zzReader = reader;
/* 638 */     this.zzAtEOF = false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ScalaTokenMaker(Reader in) {
/* 651 */     this.zzReader = in;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public ScalaTokenMaker(InputStream in) {
/* 661 */     this(new InputStreamReader(in));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static char[] zzUnpackCMap(String packed) {
/* 671 */     char[] map = new char[65536];
/* 672 */     int i = 0;
/* 673 */     int j = 0;
/* 674 */     label10: while (i < 150) {
/* 675 */       int count = packed.charAt(i++);
/* 676 */       char value = packed.charAt(i++); while (true)
/* 677 */       { map[j++] = value; if (--count <= 0)
/*     */           continue label10;  } 
/* 679 */     }  return map;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void yyclose() throws IOException {
/* 687 */     this.zzAtEOF = true;
/* 688 */     this.zzEndRead = this.zzStartRead;
/*     */     
/* 690 */     if (this.zzReader != null) {
/* 691 */       this.zzReader.close();
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int yystate() {
/* 699 */     return this.zzLexicalState;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final void yybegin(int newState) {
/* 710 */     this.zzLexicalState = newState;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final String yytext() {
/* 718 */     return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final char yycharat(int pos) {
/* 734 */     return this.zzBuffer[this.zzStartRead + pos];
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public final int yylength() {
/* 742 */     return this.zzMarkedPos - this.zzStartRead;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private void zzScanError(int errorCode) {
/*     */     String message;
/*     */     try {
/* 763 */       message = ZZ_ERROR_MSG[errorCode];
/*     */     }
/* 765 */     catch (ArrayIndexOutOfBoundsException e) {
/* 766 */       message = ZZ_ERROR_MSG[0];
/*     */     } 
/*     */     
/* 769 */     throw new Error(message);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void yypushback(int number) {
/* 782 */     if (number > yylength()) {
/* 783 */       zzScanError(2);
/*     */     }
/* 785 */     this.zzMarkedPos -= number;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Token yylex() throws IOException {
/* 803 */     int zzEndReadL = this.zzEndRead;
/* 804 */     char[] zzBufferL = this.zzBuffer;
/* 805 */     char[] zzCMapL = ZZ_CMAP;
/*     */     
/* 807 */     int[] zzTransL = ZZ_TRANS;
/* 808 */     int[] zzRowMapL = ZZ_ROWMAP;
/* 809 */     int[] zzAttrL = ZZ_ATTRIBUTE;
/*     */     
/*     */     while (true) {
/* 812 */       int zzInput, temp, zzMarkedPosL = this.zzMarkedPos;
/*     */       
/* 814 */       int zzAction = -1;
/*     */       
/* 816 */       int zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;
/*     */       
/* 818 */       this.zzState = this.zzLexicalState;
/*     */ 
/*     */ 
/*     */ 
/*     */       
/*     */       while (true) {
/* 824 */         if (zzCurrentPosL < zzEndReadL)
/* 825 */         { zzInput = zzBufferL[zzCurrentPosL++]; }
/* 826 */         else { if (this.zzAtEOF) {
/* 827 */             int i = -1;
/*     */             
/*     */             break;
/*     */           } 
/*     */           
/* 832 */           this.zzCurrentPos = zzCurrentPosL;
/* 833 */           this.zzMarkedPos = zzMarkedPosL;
/* 834 */           boolean eof = zzRefill();
/*     */           
/* 836 */           zzCurrentPosL = this.zzCurrentPos;
/* 837 */           zzMarkedPosL = this.zzMarkedPos;
/* 838 */           zzBufferL = this.zzBuffer;
/* 839 */           zzEndReadL = this.zzEndRead;
/* 840 */           if (eof) {
/* 841 */             int i = -1;
/*     */             
/*     */             break;
/*     */           } 
/* 845 */           zzInput = zzBufferL[zzCurrentPosL++]; }
/*     */ 
/*     */         
/* 848 */         int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
/* 849 */         if (zzNext == -1)
/* 850 */           break;  this.zzState = zzNext;
/*     */         
/* 852 */         int zzAttributes = zzAttrL[this.zzState];
/* 853 */         if ((zzAttributes & 0x1) == 1) {
/* 854 */           zzAction = this.zzState;
/* 855 */           zzMarkedPosL = zzCurrentPosL;
/* 856 */           if ((zzAttributes & 0x8) == 8) {
/*     */             break;
/*     */           }
/*     */         } 
/*     */       } 
/*     */ 
/*     */       
/* 863 */       this.zzMarkedPos = zzMarkedPosL;
/*     */       
/* 865 */       switch ((zzAction < 0) ? zzAction : ZZ_ACTION[zzAction]) {
/*     */         case 6:
/* 867 */           addNullToken(); return (Token)this.firstToken;
/*     */         case 26:
/*     */           continue;
/*     */         case 15:
/* 871 */           addToken(14); continue;
/*     */         case 27:
/*     */           continue;
/*     */         case 21:
/* 875 */           this.start = this.zzMarkedPos - 3; yybegin(1); continue;
/*     */         case 28:
/*     */           continue;
/*     */         case 19:
/* 879 */           yybegin(0); addToken(this.start, this.zzStartRead + 1, 2); continue;
/*     */         case 29:
/*     */           continue;
/*     */         case 18:
/* 883 */           this.start = this.zzMarkedPos - 2; yybegin(2); continue;
/*     */         case 30:
/*     */           continue;
/*     */         case 8:
/* 887 */           addToken(21); continue;
/*     */         case 31:
/*     */           continue;
/*     */         case 20:
/* 891 */           addToken(12); continue;
/*     */         case 32:
/*     */           continue;
/*     */         case 13:
/* 895 */           addToken(11); continue;
/*     */         case 33:
/*     */           continue;
/*     */         case 14:
/* 899 */           addToken(6); continue;
/*     */         case 34:
/*     */           continue;
/*     */         case 4:
/* 903 */           addToken(22); continue;
/*     */         case 35:
/*     */           continue;
/*     */         case 22:
/* 907 */           addToken(15);
/*     */           continue;
/*     */         
/*     */         case 36:
/*     */         case 9:
/*     */         case 37:
/*     */           continue;
/*     */         case 2:
/* 915 */           addToken(20); continue;
/*     */         case 38:
/*     */           continue;
/*     */         case 12:
/* 919 */           addToken(this.start, this.zzStartRead - 1, 1); addNullToken(); return (Token)this.firstToken;
/*     */         case 39:
/*     */           continue;
/*     */         case 17:
/* 923 */           this.start = this.zzMarkedPos - 2; yybegin(3); continue;
/*     */         case 40:
/*     */           continue;
/*     */         case 23:
/* 927 */           addToken(this.start, this.zzStartRead + 2, 13); yybegin(0); continue;
/*     */         case 41:
/*     */           continue;
/*     */         case 5:
/* 931 */           addToken(38); addNullToken(); return (Token)this.firstToken;
/*     */         case 42:
/*     */           continue;
/*     */         case 7:
/* 935 */           addToken(37); addNullToken(); return (Token)this.firstToken;
/*     */         case 43:
/*     */           continue;
/*     */         case 16:
/* 939 */           addToken(13); continue;
/*     */         case 44:
/*     */           continue;
/*     */         case 10:
/* 943 */           addToken(this.start, this.zzStartRead - 1, 13); return (Token)this.firstToken;
/*     */         case 45:
/*     */           continue;
/*     */         case 25:
/* 947 */           temp = this.zzStartRead; addToken(this.start, this.zzStartRead - 1, 1); addHyperlinkToken(temp, this.zzMarkedPos - 1, 1); this.start = this.zzMarkedPos; continue;
/*     */         case 46:
/*     */           continue;
/*     */         case 24:
/* 951 */           temp = this.zzStartRead; addToken(this.start, this.zzStartRead - 1, 2); addHyperlinkToken(temp, this.zzMarkedPos - 1, 2); this.start = this.zzMarkedPos; continue;
/*     */         case 47:
/*     */           continue;
/*     */         case 3:
/* 955 */           addToken(10);
/*     */           continue;
/*     */         
/*     */         case 48:
/*     */         case 1:
/*     */         case 49:
/*     */           continue;
/*     */         case 11:
/* 963 */           addToken(this.start, this.zzStartRead - 1, 2); return (Token)this.firstToken;
/*     */         case 50:
/*     */           continue;
/*     */       } 
/* 967 */       if (zzInput == -1 && this.zzStartRead == this.zzCurrentPos) {
/* 968 */         this.zzAtEOF = true;
/* 969 */         switch (this.zzLexicalState) {
/*     */           case 3:
/* 971 */             addToken(this.start, this.zzStartRead - 1, 1); addNullToken(); return (Token)this.firstToken;
/*     */           case 185:
/*     */             continue;
/*     */           case 1:
/* 975 */             addToken(this.start, this.zzStartRead - 1, 13); return (Token)this.firstToken;
/*     */           case 186:
/*     */             continue;
/*     */           case 0:
/* 979 */             addNullToken(); return (Token)this.firstToken;
/*     */           case 187:
/*     */             continue;
/*     */           case 2:
/* 983 */             addToken(this.start, this.zzStartRead - 1, 2); return (Token)this.firstToken;
/*     */           case 188:
/*     */             continue;
/*     */         } 
/* 987 */         return null;
/*     */       } 
/*     */ 
/*     */       
/* 991 */       zzScanError(1);
/*     */     } 
/*     */   }
/*     */ }


/* Location:              C:\User\\user\Downloads\godzilla.jar!\org\fif\\ui\rsyntaxtextarea\modes\ScalaTokenMaker.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */